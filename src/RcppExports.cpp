// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// integrateModelVectorized
Rcpp::List integrateModelVectorized(Rcpp::NumericVector init, Rcpp::NumericVector g_in, Rcpp::NumericVector c_in, Rcpp::NumericVector l_in, double t0, double t1, double dt);
RcppExport SEXP _gen3sis_integrateModelVectorized(SEXP initSEXP, SEXP g_inSEXP, SEXP c_inSEXP, SEXP l_inSEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type g_in(g_inSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type c_in(c_inSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type l_in(l_inSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(integrateModelVectorized(init, g_in, c_in, l_in, t0, t1, dt));
    return rcpp_result_gen;
END_RCPP
}
// integrateModel
Rcpp::List integrateModel(Rcpp::NumericVector init, Rcpp::NumericVector r, Rcpp::NumericMatrix a, double t0, double t1, double dt);
RcppExport SEXP _gen3sis_integrateModel(SEXP initSEXP, SEXP rSEXP, SEXP aSEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(integrateModel(init, r, a, t0, t1, dt));
    return rcpp_result_gen;
END_RCPP
}
// getEntities
IntegerVector getEntities(NumericMatrix ma);
RcppExport SEXP _gen3sis_getEntities(SEXP maSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ma(maSEXP);
    rcpp_result_gen = Rcpp::wrap(getEntities(ma));
    return rcpp_result_gen;
END_RCPP
}
// epsN
IntegerVector epsN(NumericVector LP, double d1);
RcppExport SEXP _gen3sis_epsN(SEXP LPSEXP, SEXP d1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type LP(LPSEXP);
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    rcpp_result_gen = Rcpp::wrap(epsN(LP, d1));
    return rcpp_result_gen;
END_RCPP
}
// conc
IntegerVector conc(IntegerVector x, IntegerVector y);
RcppExport SEXP _gen3sis_conc(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(conc(x, y));
    return rcpp_result_gen;
END_RCPP
}
// is_any_f
bool is_any_f(LogicalVector x);
RcppExport SEXP _gen3sis_is_any_f(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_any_f(x));
    return rcpp_result_gen;
END_RCPP
}
// Tdbscan
IntegerVector Tdbscan(NumericMatrix D, double d1, double minPts);
RcppExport SEXP _gen3sis_Tdbscan(SEXP DSEXP, SEXP d1SEXP, SEXP minPtsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< double >::type minPts(minPtsSEXP);
    rcpp_result_gen = Rcpp::wrap(Tdbscan(D, d1, minPts));
    return rcpp_result_gen;
END_RCPP
}
// Tdbscan_variable
IntegerVector Tdbscan_variable(NumericMatrix D, NumericVector distances, double minPts);
RcppExport SEXP _gen3sis_Tdbscan_variable(SEXP DSEXP, SEXP distancesSEXP, SEXP minPtsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type D(DSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< double >::type minPts(minPtsSEXP);
    rcpp_result_gen = Rcpp::wrap(Tdbscan_variable(D, distances, minPts));
    return rcpp_result_gen;
END_RCPP
}
// AllopatryKernel
Rcpp::IntegerVector AllopatryKernel(Rcpp::NumericMatrix dist1, double ds, Rcpp::IntegerVector Speciesj);
RcppExport SEXP _gen3sis_AllopatryKernel(SEXP dist1SEXP, SEXP dsSEXP, SEXP SpeciesjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dist1(dist1SEXP);
    Rcpp::traits::input_parameter< double >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Speciesj(SpeciesjSEXP);
    rcpp_result_gen = Rcpp::wrap(AllopatryKernel(dist1, ds, Speciesj));
    return rcpp_result_gen;
END_RCPP
}
// SympatryKernel
Rcpp::IntegerVector SympatryKernel(Rcpp::IntegerVector Speciesj, double p, int NbAllo);
RcppExport SEXP _gen3sis_SympatryKernel(SEXP SpeciesjSEXP, SEXP pSEXP, SEXP NbAlloSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Speciesj(SpeciesjSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type NbAllo(NbAlloSEXP);
    rcpp_result_gen = Rcpp::wrap(SympatryKernel(Speciesj, p, NbAllo));
    return rcpp_result_gen;
END_RCPP
}
// DispersionKernel
Rcpp::IntegerVector DispersionKernel(Rcpp::NumericMatrix dist2, double d, IntegerVector Speciesj);
RcppExport SEXP _gen3sis_DispersionKernel(SEXP dist2SEXP, SEXP dSEXP, SEXP SpeciesjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Speciesj(SpeciesjSEXP);
    rcpp_result_gen = Rcpp::wrap(DispersionKernel(dist2, d, Speciesj));
    return rcpp_result_gen;
END_RCPP
}
// SpDiv
IntegerMatrix SpDiv(double ds, double d, double p, IntegerMatrix MatrixSpecies, NumericMatrix dist1, NumericMatrix dist2, int SpMax);
RcppExport SEXP _gen3sis_SpDiv(SEXP dsSEXP, SEXP dSEXP, SEXP pSEXP, SEXP MatrixSpeciesSEXP, SEXP dist1SEXP, SEXP dist2SEXP, SEXP SpMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type MatrixSpecies(MatrixSpeciesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dist1(dist1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dist2(dist2SEXP);
    Rcpp::traits::input_parameter< int >::type SpMax(SpMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(SpDiv(ds, d, p, MatrixSpecies, dist1, dist2, SpMax));
    return rcpp_result_gen;
END_RCPP
}
// get_distance_matrix
Rcpp::NumericMatrix get_distance_matrix(const IntegerVector habitable_cells, const int num_cells, const IntegerVector dist_p, const IntegerVector dist_i, const NumericVector dist_x, const double max_distance);
RcppExport SEXP _gen3sis_get_distance_matrix(SEXP habitable_cellsSEXP, SEXP num_cellsSEXP, SEXP dist_pSEXP, SEXP dist_iSEXP, SEXP dist_xSEXP, SEXP max_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector >::type habitable_cells(habitable_cellsSEXP);
    Rcpp::traits::input_parameter< const int >::type num_cells(num_cellsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type dist_p(dist_pSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type dist_i(dist_iSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type dist_x(dist_xSEXP);
    Rcpp::traits::input_parameter< const double >::type max_distance(max_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(get_distance_matrix(habitable_cells, num_cells, dist_p, dist_i, dist_x, max_distance));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gen3sis_integrateModelVectorized", (DL_FUNC) &_gen3sis_integrateModelVectorized, 7},
    {"_gen3sis_integrateModel", (DL_FUNC) &_gen3sis_integrateModel, 6},
    {"_gen3sis_getEntities", (DL_FUNC) &_gen3sis_getEntities, 1},
    {"_gen3sis_epsN", (DL_FUNC) &_gen3sis_epsN, 2},
    {"_gen3sis_conc", (DL_FUNC) &_gen3sis_conc, 2},
    {"_gen3sis_is_any_f", (DL_FUNC) &_gen3sis_is_any_f, 1},
    {"_gen3sis_Tdbscan", (DL_FUNC) &_gen3sis_Tdbscan, 3},
    {"_gen3sis_Tdbscan_variable", (DL_FUNC) &_gen3sis_Tdbscan_variable, 3},
    {"_gen3sis_AllopatryKernel", (DL_FUNC) &_gen3sis_AllopatryKernel, 3},
    {"_gen3sis_SympatryKernel", (DL_FUNC) &_gen3sis_SympatryKernel, 3},
    {"_gen3sis_DispersionKernel", (DL_FUNC) &_gen3sis_DispersionKernel, 3},
    {"_gen3sis_SpDiv", (DL_FUNC) &_gen3sis_SpDiv, 7},
    {"_gen3sis_get_distance_matrix", (DL_FUNC) &_gen3sis_get_distance_matrix, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_gen3sis(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
